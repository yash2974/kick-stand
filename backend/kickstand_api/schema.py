from typing import Optional, Union
from pydantic import BaseModel, EmailStr, ConfigDict, Field
from datetime import date, datetime

from sqlalchemy import Boolean
from sqlalchemy.types import Date

class UserCreate(BaseModel):
    user_id: str
    name: str
    email: EmailStr
    phone: str

class UserOut(BaseModel):
    user_id: str
    name: str
    email: EmailStr
    phone: str
    created_at: datetime  # Default to current date and time

    model_config = ConfigDict(
        from_attributes=True
    )

class VehicleCreate(BaseModel):
    vehicle_id: str
    model_name: str
    user_id: str
    

class VehicleOut(BaseModel):
    vehicle_id: str
    model_name: str
    user_id: str
    
class ExpenseCreate(BaseModel):
    # expense_id: int  # This will be auto-generated by the database
    vehicle_id: str
    user_id: str
    amount: float
    category: str
    date: date  

class Ride(BaseModel):
    ride_id: Optional[int] = None  # This will be auto-generated by the database
    created_by:str
    title:str
    description:str
    start_location:str
    end_location:str
    start_time:datetime
    end_time:datetime
    current_riders:Optional[int] = 1
    created_at: Optional[datetime] = Field(default_factory=datetime.now)
    image_url: Optional[str] = None
    private: bool
    code: Optional[str] = None
    map_url: str
    

class RideParticipants(BaseModel):
    #id int will be generated by db
    ride_id: int
    user_id:str
    joined_at:Optional[datetime] = Field(default_factory=datetime.now)
  
class RideJoinRequests(BaseModel):
    # request_id int will be generated by db
    ride_id:int
    user_id:str
    status:Optional[str]="pending"
    requested_at:Optional[datetime]= Field(default_factory=datetime.now)

class RideJoinRequestsWithUser(BaseModel):
    request_id: int
    ride_id: int
    user_id: str
    status: str
    requested_at: datetime
    username: str
    phone: str


    class Config:
        from_attributes = True
class RideJoinRequestsWithUserPending(BaseModel):
    request_id: int
    ride_id: int
    user_id: str
    status: str
    requested_at: datetime
    username: str
    

    class Config:
        from_attributes = True

class RideWithInviteCount(BaseModel):
    ride_id: int
    created_by: str
    title: str
    description: str
    start_location: str
    end_location: str
    start_time: datetime
    end_time: datetime
    current_riders: int
    created_at: datetime
    image_url: str
    invite_count: int
    map_url: str
    private: bool
    code: str
    
    class Config:
        from_attributes = True

class CreateForum(BaseModel):
    title: str
    content: str
    upvote: int = 0
    downvote: int = 0
    comments: int = 0
    user_id: str
    username: str
    tags: Optional[list[str]] = None
    created_at: Optional[datetime] = Field(default_factory=datetime.now)

class PostComment(BaseModel):
    post_id: str
    username: str
    text: str
    created_at: Optional[datetime] = Field(default_factory=datetime.now)
    parent_comment_id: Optional[str] = None
    
class Votes(BaseModel):
    post_id: str
    user_id: str

class ReportPost(BaseModel):
    post_id: str
    user_id: str
    reported_by: str

class ReportRide(BaseModel):
    ride_id: int
    user_id: str
    reported_by: str

class DeleteForum(BaseModel):
    post_id: str
    user_id: str

class ServiceReviews(BaseModel):
    service_centre: str
    map_url: str
    review: str
    rating: int
    helpful: Optional[int] = 0
    created_at: Optional[datetime] = Field(default_factory=datetime.now)   
    approved: Optional[bool] = False


